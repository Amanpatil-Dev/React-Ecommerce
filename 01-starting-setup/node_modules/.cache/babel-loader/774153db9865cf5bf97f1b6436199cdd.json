{"ast":null,"code":"var _jsxFileName = \"/Users/amanpatil/Desktop/My Mac/FrontEnd Mentor/ecommerce-product-page-main/01-starting-setup/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer, useState } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultValue = {\n  items: [],\n  totalAmount: 0\n};\nlet Message;\n\nconst reducerCartHandler = (state, action) => {\n  if (action.type === 'ADD') {\n    if (action.item.quantity > 0) {\n      const totalAmount = state.totalAmount + action.item.price * action.item.quantity; //search if the new product is in the cart or not\n\n      const existingProductIndex = state.items.findIndex(item => item.id === action.item.id);\n      const existingProduct = state.items[existingProductIndex];\n      let UpdatedItems;\n      Message = 'Successfully Added';\n\n      if (existingProduct) {\n        const updatedItem = { ...existingProduct,\n          quantity: existingProduct.quantity + action.item.quantity\n        };\n        UpdatedItems = [...state.items];\n        UpdatedItems[existingProductIndex] = updatedItem;\n      } else {\n        UpdatedItems = state.items.concat(action.item);\n      }\n\n      return {\n        items: UpdatedItems,\n        totalAmount: totalAmount,\n        img: action.productImage\n      };\n    }\n  }\n\n  if (action.type === 'DELETE') {\n    const existingProductIndex = state.items.findIndex(item => item.id === action.id);\n    const existingProduct = state.items[existingProductIndex];\n    let deleteItem;\n\n    if (existingProduct) {\n      deleteItem = [];\n    }\n\n    return {\n      items: deleteItem,\n      totalAmount: 0,\n      img: undefined\n    };\n  }\n};\n\nfunction CartProvider(props) {\n  _s();\n\n  const [Message, setMessage] = useState(Message);\n  const [cartState, dispatchCartState] = useReducer(reducerCartHandler, defaultValue);\n\n  const addItemToCartHandler = item => {\n    dispatchCartState({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeitemFromCartHandler = id => {\n    dispatchCartState({\n      type: 'DELETE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    addItem: addItemToCartHandler,\n    removeItem: removeitemFromCartHandler,\n    img: cartState.img,\n    totalAmount: cartState.totalAmount\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 12\n  }, this);\n}\n\n_s(CartProvider, \"cErapN35fGyCnenZzXsw/AE3I00=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/amanpatil/Desktop/My Mac/FrontEnd Mentor/ecommerce-product-page-main/01-starting-setup/src/store/CartProvider.js"],"names":["useReducer","useState","CartContext","defaultValue","items","totalAmount","Message","reducerCartHandler","state","action","type","item","quantity","price","existingProductIndex","findIndex","id","existingProduct","UpdatedItems","updatedItem","concat","img","productImage","deleteItem","undefined","CartProvider","props","setMessage","cartState","dispatchCartState","addItemToCartHandler","removeitemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import { useReducer, useState } from \"react\";\nimport CartContext from \"./cart-context\";\nconst defaultValue = {\n    items: [],\n    totalAmount: 0\n\n}\nlet Message;\nconst reducerCartHandler = (state, action) => {\n    if (action.type === 'ADD') {\n        if(action.item.quantity > 0){\n           \n            \n\n        const totalAmount = state.totalAmount + action.item.price * action.item.quantity\n\n        //search if the new product is in the cart or not\n        const existingProductIndex = state.items.findIndex(item => item.id === action.item.id)\n        const existingProduct = state.items[existingProductIndex]\n        let UpdatedItems\n        Message='Successfully Added'\n\n        if (existingProduct) {\n            const updatedItem = {\n                ...existingProduct,\n                quantity: existingProduct.quantity + action.item.quantity\n            }\n            \n\n            UpdatedItems = [...state.items]\n            UpdatedItems[existingProductIndex] = updatedItem\n        } else {\n            UpdatedItems = state.items.concat(action.item);\n\n\n        }\n        return {\n            items: UpdatedItems,\n            totalAmount: totalAmount,\n            img: action.productImage\n        }\n    }\n\n\n\n        \n    }\n    if(action.type ==='DELETE'){\n        const existingProductIndex=state.items.findIndex((item)=> item.id === action.id)\n\n        const existingProduct=state.items[existingProductIndex]\n        \n        let deleteItem;\n        if(existingProduct){\n            deleteItem=[]\n            \n        }\n\n        return{\n            items:deleteItem,\n            totalAmount:0,\n            img:undefined\n        }\n    }\n\n}\n\nfunction CartProvider(props) {\n    const [Message,setMessage]=useState(Message)\n\n    const [cartState, dispatchCartState] = useReducer(reducerCartHandler, defaultValue)\n\n    const addItemToCartHandler = (item) => {\n        dispatchCartState({ type: 'ADD', item: item })\n    }\n    const removeitemFromCartHandler=(id)=>{\n        dispatchCartState({type:'DELETE',id:id})\n    }\n  \n    const cartContext = {\n        items: cartState.items,\n        addItem: addItemToCartHandler,\n        removeItem:removeitemFromCartHandler,\n        img: cartState.img,\n        totalAmount:cartState.totalAmount,\n        \n        \n    }\n\n    return <CartContext.Provider value={cartContext}>\n        {props.children}\n    </CartContext.Provider>\n\n}\n\nexport default CartProvider"]},"metadata":{},"sourceType":"module"}